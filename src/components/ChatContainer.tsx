import React, { useState, useEffect, useRef } from 'react';
import { useTranslation } from 'next-i18next';
import ChatBubble from './ChatBubble';
import ChatInput from './ChatInput';
import QuickReplies from './QuickReplies';
import { ChatMessage, ChatState, DocumentAttachment, TrackingVisualization } from '../types/chat';
import { v4 as uuidv4 } from 'uuid';
import ShipmentTracker from './tracking/ShipmentTracker';

interface ChatContainerProps {
  theme?: 'light' | 'dark';
}

interface QuickReplyOption {
  label: string;
  value: string;
  icon?: string;
  description?: string;
}

// Estado para el formulario de cotizaci√≥n
interface QuoteFormState {
  active: boolean;
  step: number;
  origin?: string;
  destination?: string;
  mode?: 'maritime' | 'air' | 'ground';
  weight?: string;
  quantity?: string;
  dimensions?: string;
  cargoType?: string;
  hsCode?: string;
  incoterm?: string;
  notes?: string;
  history: number[]; // Para implementar navegaci√≥n hacia atr√°s
}

// Documento simulado para el ejemplo
const SAMPLE_DOCUMENTS: { [key: string]: DocumentAttachment } = {
  bl: {
    id: 'doc-bl-1',
    name: 'Bill of Lading.pdf',
    type: 'application/pdf',
    size: 145000,
    content: 'Contenido simulado del Bill of Lading'
  },
  invoice: {
    id: 'doc-inv-1',
    name: 'Commercial_Invoice.pdf',
    type: 'application/pdf',
    size: 78000,
    content: 'Contenido simulado de la factura comercial'
  },
  packing: {
    id: 'doc-pack-1',
    name: 'Packing_List.pdf',
    type: 'application/pdf',
    size: 56000,
    content: 'Contenido simulado del packing list'
  },
  custom: {
    id: 'doc-customs-1',
    name: 'Customs_Declaration.pdf',
    type: 'application/pdf',
    size: 120000,
    content: 'Contenido simulado de la declaraci√≥n aduanera'
  },
  certificate: {
    id: 'doc-cert-1',
    name: 'Certificate_of_Origin.pdf',
    type: 'application/pdf',
    size: 95000,
    content: 'Contenido simulado del certificado de origen'
  }
};

const ChatContainer: React.FC<ChatContainerProps> = ({ theme = 'light' }) => {
  const { t } = useTranslation('common');
  const [chatState, setChatState] = useState<ChatState>({
    messages: [],
    isLoading: false,
    error: null,
    sessionId: null,
  });
  const [quickReplyOptions, setQuickReplyOptions] = useState<QuickReplyOption[]>([]);
  const [quoteForm, setQuoteForm] = useState<QuoteFormState>({
    active: false,
    step: 0,
    history: []
  });

  const chatContainerRef = useRef<HTMLDivElement>(null);

  // Scroll to bottom when messages change
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatState.messages, quickReplyOptions]);

  // Add a welcome message when the component mounts
  useEffect(() => {
    initializeChat();
  }, []);

  // Initialize chat with welcome message
  const initializeChat = () => {
    const welcomeMessage: ChatMessage = {
      id: uuidv4(),
      content: t('intro') + '\n\n' + t('howCanIHelp'),
      role: 'assistant',
      timestamp: new Date().toISOString(),
      quickReplies: [
        { 
          label: t('routeInfo'),
          value: t('requestRouteInfo', 'Necesito informaci√≥n sobre rutas y servicios'),
          icon: 'üö¢',
          description: t('routeInfoDesc', 'Tiempo de tr√°nsito, salidas y puertos disponibles')
        },
        { 
          label: t('quotes'), 
          value: t('requestQuote', 'Quiero solicitar una cotizaci√≥n para transporte internacional'), 
          icon: 'üí∞',
          description: t('quotesDesc', 'Obtenga una cotizaci√≥n preliminar para su carga')
        },
        { 
          label: t('tracking'), 
          value: t('requestTracking', 'Quiero hacer seguimiento a mi embarque'), 
          icon: 'üì¶',
          description: t('trackingDesc', 'Status actualizado y ubicaci√≥n de su carga')
        },
        { 
          label: t('documents'), 
          value: t('requestDocumentation', 'Cu√°les son los requisitos documentales para importar'), 
          icon: 'üìÑ',
          description: t('documentsDesc', 'Documentos necesarios seg√∫n origen/destino') 
        },
        { 
          label: t('experts'), 
          value: t('requestExpert', 'Necesito hablar con un especialista'), 
          icon: 'üë®‚Äçüíº',
          description: t('expertsDesc', 'Consultas especializadas y asistencia personalizada')
        }
      ],
      quickRepliesVariant: 'feature',
      quickRepliesColumns: 2
    };
    
    setChatState((prevState) => ({
      ...prevState,
      messages: [welcomeMessage],
    }));
  };

  // Manejar la progresi√≥n del formulario de cotizaci√≥n
  const handleQuoteFormProgress = (userInput: string) => {
    setQuoteForm(prev => {
      const newForm = { ...prev };
      
      // Guardar el paso actual en el historial para navegaci√≥n hacia atr√°s
      newForm.history = [...prev.history, prev.step];
      
      // Manejar comandos especiales
      if (userInput.toLowerCase() === 'volver' || userInput.toLowerCase() === 'atr√°s') {
        if (newForm.history.length > 0) {
          // Ir al paso anterior
          const previousStep = newForm.history.pop();
          newForm.step = previousStep || 0;
          return newForm;
        }
        return prev; // Si no hay historial, mantenemos el estado actual
      }
      
      if (userInput.toLowerCase() === 'cancelar cotizaci√≥n' || userInput.toLowerCase() === 'cancelar') {
        // A√±adir mensaje de cancelaci√≥n
        const cancelMessage: ChatMessage = {
          id: uuidv4(),
          content: "Has cancelado la cotizaci√≥n. ¬øEn qu√© m√°s puedo ayudarte?",
          role: 'assistant',
          timestamp: Date.now().toString(),
          quickReplies: [
            { label: 'Iniciar nueva cotizaci√≥n', value: 'Quiero iniciar una cotizaci√≥n', icon: 'üìã' },
            { label: 'Rastrear env√≠o', value: 'Quiero rastrear mi env√≠o', icon: 'üîç' },
            { label: 'Requisitos documentales', value: 'Cu√°les son los requisitos documentales', icon: 'üìÑ' }
          ]
        };
        
        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, cancelMessage]
        }));
        
        // Resetear el formulario
        return {
          active: false,
          step: 0,
          history: []
        };
      }
      
      // Actualizar el campo correspondiente seg√∫n el paso actual
      switch (prev.step) {
        case 1: // Origen
          newForm.origin = userInput;
          break;
        case 2: // Destino
          newForm.destination = userInput;
          break;
        case 3: // Modalidad
          if (userInput.toLowerCase().includes('mar√≠timo') || userInput.toLowerCase().includes('maritimo')) {
            newForm.mode = 'maritime';
          } else if (userInput.toLowerCase().includes('a√©reo') || userInput.toLowerCase().includes('aereo')) {
            newForm.mode = 'air';
          } else if (userInput.toLowerCase().includes('terrestre')) {
            newForm.mode = 'ground';
          }
          break;
        case 4: // Peso
          newForm.weight = userInput;
          break;
        case 5: // Cantidad
          newForm.quantity = userInput;
          break;
        case 6: // Dimensiones
          newForm.dimensions = userInput;
          break;
        case 7: // Tipo de carga y HS code
          newForm.cargoType = userInput;
          // Intentar extraer HS code si existe
          const hsCodeMatch = userInput.match(/\b\d{6,10}\b/);
          if (hsCodeMatch) {
            newForm.hsCode = hsCodeMatch[0];
          }
          break;
        case 8: // Incoterm
          newForm.incoterm = userInput;
          break;
        case 9: // Notas
          newForm.notes = userInput;
          break;
      }
      
      // Avanzar al siguiente paso
      newForm.step += 1;
      
      // Si hemos completado todos los pasos, desactivar el formulario
      if (newForm.step > 10) {
        newForm.active = false;
        // Crear resumen de la cotizaci√≥n para enviar
        const quoteSummary = `Solicito cotizaci√≥n con los siguientes datos:
- Origen: ${newForm.origin}
- Destino: ${newForm.destination}
- Modalidad: ${newForm.mode === 'maritime' ? 'Mar√≠timo' : newForm.mode === 'air' ? 'A√©reo' : 'Terrestre'}
- Peso: ${newForm.weight}
- Cantidad: ${newForm.quantity}
- Dimensiones: ${newForm.dimensions}
- Tipo de carga: ${newForm.cargoType}${newForm.hsCode ? `\n- HS Code: ${newForm.hsCode}` : ''}
- Incoterm: ${newForm.incoterm}${newForm.notes ? `\n- Notas adicionales: ${newForm.notes}` : ''}`;
        
        // Enviar este resumen como mensaje del usuario
        setTimeout(() => {
          handleSendMessage(quoteSummary);
        }, 500);
      }
      
      return newForm;
    });
    
    // Generar las siguientes opciones o preguntas basadas en el paso actual
    if (quoteForm.step < 10) {
      generateQuoteFormPrompt();
    }
  };

  // Generar mensajes y opciones para el formulario de cotizaci√≥n
  const generateQuoteFormPrompt = () => {
    let assistantMessage: ChatMessage | null = null;
    let options: QuickReplyOption[] = [];
    const totalSteps = 9;
    const currentStep = quoteForm.step;
    const progressText = `Paso ${currentStep} de ${totalSteps}`;
    
    // Opciones comunes para todos los pasos
    const commonOptions: QuickReplyOption[] = [
      { label: 'Volver atr√°s', value: 'volver', icon: '‚¨ÖÔ∏è' },
      { label: 'Cancelar', value: 'cancelar cotizaci√≥n', icon: '‚ùå' }
    ];
    
    switch (quoteForm.step) {
      case 1:
        assistantMessage = {
          id: uuidv4(),
          content: `${progressText}: Para iniciar la cotizaci√≥n, necesito algunos datos. ¬øCu√°l es el origen de tu carga? (Ciudad y pa√≠s)`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        options = [
          { label: 'Ciudad de M√©xico, M√©xico', value: 'Ciudad de M√©xico, M√©xico', icon: 'üìç' },
          { label: 'Shangh√°i, China', value: 'Shangh√°i, China', icon: 'üìç' },
          { label: 'Los √Ångeles, EE.UU.', value: 'Los √Ångeles, EE.UU.', icon: 'üìç' },
        ];
        break;
      case 2:
        assistantMessage = {
          id: uuidv4(),
          content: `${progressText}: Origen: ${quoteForm.origin}. Ahora, ¬øcu√°l es el destino de tu carga? (Ciudad y pa√≠s)`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        // Mostrar opciones contextuales seg√∫n el origen
        if (quoteForm.origin?.includes('M√©xico')) {
          options = [
            { label: 'Miami, EE.UU.', value: 'Miami, EE.UU.', icon: 'üìç' },
            { label: 'Los √Ångeles, EE.UU.', value: 'Los √Ångeles, EE.UU.', icon: 'üìç' },
            { label: 'Shangh√°i, China', value: 'Shangh√°i, China', icon: 'üìç' },
          ];
        } else if (quoteForm.origin?.includes('China')) {
          options = [
            { label: 'Ciudad de M√©xico, M√©xico', value: 'Ciudad de M√©xico, M√©xico', icon: 'üìç' },
            { label: 'Los √Ångeles, EE.UU.', value: 'Los √Ångeles, EE.UU.', icon: 'üìç' },
            { label: 'Rotterdam, Pa√≠ses Bajos', value: 'Rotterdam, Pa√≠ses Bajos', icon: 'üìç' },
          ];
        } else {
          options = [
            { label: 'Miami, EE.UU.', value: 'Miami, EE.UU.', icon: 'üìç' },
            { label: 'Rotterdam, Pa√≠ses Bajos', value: 'Rotterdam, Pa√≠ses Bajos', icon: 'üìç' },
            { label: 'Manzanillo, M√©xico', value: 'Manzanillo, M√©xico', icon: 'üìç' },
          ];
        }
        break;
      case 3:
        assistantMessage = {
          id: uuidv4(),
          content: `${progressText}: Destino: ${quoteForm.destination}. ¬øQu√© modalidad de transporte prefieres?`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        
        // Mostrar opciones relevantes seg√∫n origen y destino
        const origDestSameContinente = 
          (quoteForm.origin?.includes('M√©xico') && quoteForm.destination?.includes('EE.UU.')) ||
          (quoteForm.origin?.includes('EE.UU.') && quoteForm.destination?.includes('M√©xico'));
        
        if (origDestSameContinente) {
          options = [
            { label: 'Terrestre', value: 'Terrestre', icon: 'üöö', description: 'Opci√≥n recomendada para rutas continentales' },
            { label: 'A√©reo', value: 'A√©reo', icon: '‚úàÔ∏è' },
            { label: 'Mar√≠timo', value: 'Mar√≠timo', icon: 'üö¢' },
          ];
        } else {
          options = [
            { label: 'Mar√≠timo', value: 'Mar√≠timo', icon: 'üö¢', description: 'Opci√≥n recomendada para rutas intercontinentales' },
            { label: 'A√©reo', value: 'A√©reo', icon: '‚úàÔ∏è' },
            { label: 'Terrestre', value: 'Terrestre', icon: 'üöö' },
          ];
        }
        break;
      case 4:
        assistantMessage = {
          id: uuidv4(),
          content: `${progressText}: Modalidad: ${quoteForm.mode === 'maritime' ? 'Mar√≠timo üö¢' : quoteForm.mode === 'air' ? 'A√©reo ‚úàÔ∏è' : 'Terrestre üöö'}. ¬øCu√°l es el peso total de la carga? (en kg)`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        options = [
          { label: 'Menos de 100 kg', value: 'Menos de 100 kg', icon: '‚öñÔ∏è' },
          { label: '100-500 kg', value: '100-500 kg', icon: '‚öñÔ∏è' },
          { label: 'M√°s de 500 kg', value: 'M√°s de 500 kg', icon: '‚öñÔ∏è' },
        ];
        break;
      case 5:
        assistantMessage = {
          id: uuidv4(),
          content: `${progressText}: Peso: ${quoteForm.weight}. ¬øCu√°l es la cantidad de bultos o contenedores?`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        options = [
          { label: '1 contenedor', value: '1 contenedor', icon: 'üì¶' },
          { label: '5 pallets', value: '5 pallets', icon: 'üì¶' },
          { label: '10 cajas', value: '10 cajas', icon: 'üì¶' },
        ];
        break;
      case 6:
        assistantMessage = {
          id: uuidv4(),
          content: `${progressText}: Cantidad: ${quoteForm.quantity}. ¬øCu√°les son las dimensiones? (largo x ancho x alto en cm)`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        
        // Opciones contextuales seg√∫n la cantidad seleccionada
        if (quoteForm.quantity?.includes('contenedor')) {
          options = [
            { label: 'Contenedor 20\'', value: 'Contenedor est√°ndar de 20 pies', icon: 'üìè' },
            { label: 'Contenedor 40\'', value: 'Contenedor est√°ndar de 40 pies', icon: 'üìè' },
            { label: 'Personalizado', value: 'Medidas personalizadas', icon: 'üìè' },
          ];
        } else {
          options = [
            { label: '120x80x100', value: '120x80x100 cm (pallet est√°ndar)', icon: 'üìè' },
            { label: '60x40x30', value: '60x40x30 cm (caja mediana)', icon: 'üìè' },
            { label: 'Personalizado', value: 'Medidas personalizadas', icon: 'üìè' },
          ];
        }
        break;
      case 7:
        assistantMessage = {
          id: uuidv4(),
          content: `${progressText}: Dimensiones: ${quoteForm.dimensions}. ¬øQu√© tipo de carga es y su c√≥digo HS (si lo conoces)?`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        options = [
          { label: 'Electr√≥nicos', value: 'Productos electr√≥nicos', icon: 'üíª' },
          { label: 'Textiles', value: 'Productos textiles', icon: 'üëï' },
          { label: 'Alimentos', value: 'Productos alimenticios', icon: 'üçé' },
          { label: 'Informaci√≥n HS', value: 'Necesito ayuda con el c√≥digo HS', icon: '‚ùì', description: 'Te ayudaremos a identificar el c√≥digo correcto' },
        ];
        break;
      case 8:
        assistantMessage = {
          id: uuidv4(),
          content: `${progressText}: Tipo de carga: ${quoteForm.cargoType}. ¬øQu√© t√©rmino de negociaci√≥n (Incoterm) prefieres?`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        options = [
          { label: 'FOB', value: 'FOB (Free On Board)', icon: 'üìÑ', description: 'Vendedor entrega en puerto de origen' },
          { label: 'CIF', value: 'CIF (Cost, Insurance and Freight)', icon: 'üìÑ', description: 'Vendedor paga flete y seguro' },
          { label: 'EXW', value: 'EXW (Ex Works)', icon: 'üìÑ', description: 'Comprador asume todos los costos' },
          { label: 'Informaci√≥n', value: 'Necesito informaci√≥n sobre Incoterms', icon: '‚ùì' },
        ];
        break;
      case 9:
        assistantMessage = {
          id: uuidv4(),
          content: `${progressText}: Incoterm: ${quoteForm.incoterm}. ¬øTienes alguna nota o requerimiento adicional?`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        options = [
          { label: 'Carga peligrosa', value: 'La carga contiene materiales peligrosos que requieren manejo especial', icon: '‚ö†Ô∏è' },
          { label: 'Carga refrigerada', value: 'Requiero transporte refrigerado', icon: '‚ùÑÔ∏è' },
          { label: 'Ninguna', value: 'No tengo requerimientos adicionales', icon: '‚úÖ' },
        ];
        break;
      case 10:
        assistantMessage = {
          id: uuidv4(),
          content: `‚úÖ Cotizaci√≥n completada. He recopilado todos los datos para tu cotizaci√≥n. Ahora te proporcionar√© opciones personalizadas basadas en la informaci√≥n proporcionada.

Resumen de datos:
‚Ä¢ Origen: ${quoteForm.origin}
‚Ä¢ Destino: ${quoteForm.destination}
‚Ä¢ Modalidad: ${quoteForm.mode === 'maritime' ? 'Mar√≠timo üö¢' : quoteForm.mode === 'air' ? 'A√©reo ‚úàÔ∏è' : 'Terrestre üöö'}
‚Ä¢ Peso: ${quoteForm.weight}
‚Ä¢ Cantidad: ${quoteForm.quantity}
‚Ä¢ Dimensiones: ${quoteForm.dimensions}
‚Ä¢ Tipo de carga: ${quoteForm.cargoType}${quoteForm.hsCode ? `\n‚Ä¢ HS Code: ${quoteForm.hsCode}` : ''}
‚Ä¢ Incoterm: ${quoteForm.incoterm}${quoteForm.notes ? `\n‚Ä¢ Notas adicionales: ${quoteForm.notes}` : ''}

Con esta informaci√≥n, te proporcionar√© una cotizaci√≥n personalizada y te explicar√© c√≥mo Nowports puede optimizar tu cadena de suministro.`,
          role: 'assistant',
          timestamp: Date.now().toString(),
        };
        break;
    }
    
    // A√±adir las opciones comunes excepto para el paso final
    if (quoteForm.step < 10 && quoteForm.step > 1) {
      options = [...options, ...commonOptions];
    }
    
    if (assistantMessage) {
      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, assistantMessage!]
      }));
    }
    
    setQuickReplyOptions(options);
  };

  // Extraer opciones de respuesta r√°pida del mensaje del asistente
  const extractQuickReplyOptions = (content: string): QuickReplyOption[] => {
    const options: QuickReplyOption[] = [];
    
    // Extraer opciones de quickReplies si est√°n en el formato [quickReplies: opci√≥n1, opci√≥n2, ...]
    const quickRepliesRegex = /\[quickReplies:\s*(.*?)\]/i;
    const quickRepliesMatch = content.match(quickRepliesRegex);
    
    if (quickRepliesMatch && quickRepliesMatch[1]) {
      // Eliminar el formato [quickReplies: ...] del contenido visible
      const cleanedContent = content.replace(quickRepliesRegex, '').trim();
      
      // Actualizar el contenido del mensaje sin el formato quickReplies
      if (chatState.messages.length > 0) {
        const lastMessage = chatState.messages[chatState.messages.length - 1];
        if (lastMessage.role === 'assistant') {
          setChatState(prev => ({
            ...prev,
            messages: prev.messages.map(msg => 
              msg.id === lastMessage.id ? { ...msg, content: cleanedContent } : msg
            )
          }));
        }
      }
      
      // Extraer las opciones
      const optionsString = quickRepliesMatch[1];
      const optionsList = optionsString.split(',').map(opt => opt.trim());
      
      // Convertir las opciones al formato QuickReplyOption
      return optionsList.map(option => ({
        label: option,
        value: option,
        icon: getIconForOption(option)
      }));
    }
    
    // Si no hay formato expl√≠cito de quickReplies, aplicar el m√©todo anterior de detecci√≥n
    // Detectar si es una respuesta a una consulta de env√≠o espec√≠fico (c√≥digo de tracking)
    const trackingCodeRegex = /\b([A-Z]{3}\d{7})\b/;
    const hasTrackingCode = content.match(trackingCodeRegex);
    
    // Detectar si es una respuesta sobre una empresa espec√≠fica
    const companyRegex = /(Olivera S\.C|cliente espec√≠fico)/i;
    const hasCompany = content.match(companyRegex);
    
    // Detectar opciones para cotizaci√≥n
    if (content.toLowerCase().includes('cotizaci√≥n') || content.toLowerCase().includes('cotizar')) {
      options.push({ label: 'Iniciar cotizaci√≥n', value: 'Quiero iniciar una cotizaci√≥n', icon: 'üìã' });
    }
    
    // Detectar opciones para consulta de env√≠o
    if (content.toLowerCase().includes('estado de') || content.toLowerCase().includes('tracking') || content.toLowerCase().includes('seguimiento')) {
      options.push({ label: 'Consultar env√≠o', value: 'Quiero consultar un env√≠o por c√≥digo', icon: 'üîç' });
    }
    
    // Opciones para empresas espec√≠ficas si se mencionan
    if (hasCompany) {
      options.push({ label: 'Ver historial', value: `Ver historial de env√≠os de ${hasCompany[1]}`, icon: 'üìú' });
      options.push({ label: 'Contactar ejecutivo', value: `Contactar a mi ejecutivo asignado para ${hasCompany[1]}`, icon: 'üë®‚Äçüíº' });
    }
    
    // Opciones para env√≠os espec√≠ficos si se mencionan
    if (hasTrackingCode) {
      options.push({ label: 'Ver detalles', value: `Ver detalles del env√≠o ${hasTrackingCode[1]}`, icon: 'üì¶' });
      options.push({ label: 'Documentos', value: `Ver documentos del env√≠o ${hasTrackingCode[1]}`, icon: 'üìÑ' });
      options.push({ label: 'Actualizar estado', value: `Actualizar estado del env√≠o ${hasTrackingCode[1]}`, icon: 'üîÑ' });
    }

    // Resto del c√≥digo existente para extraer opciones...
    
    return options;
  };
  
  // Obtener un √≠cono para la opci√≥n seg√∫n su contenido
  const getIconForOption = (option: string): string => {
    const optionLower = option.toLowerCase();
    
    if (optionLower.includes('electr√≥nico')) return 'üì±';
    if (optionLower.includes('textil')) return 'üëï';
    if (optionLower.includes('maquinaria')) return '‚öôÔ∏è';
    if (optionLower.includes('automotriz')) return 'üöó';
    if (optionLower.includes('alimento')) return 'üçé';
    if (optionLower.includes('qu√≠mico')) return 'üß™';
    if (optionLower.includes('pl√°stico')) return '‚ôªÔ∏è';
    if (optionLower.includes('mobiliario')) return 'ü™ë';
    if (optionLower.includes('metal')) return 'üîß';
    
    if (optionLower.includes('ligera')) return '‚öñÔ∏è';
    if (optionLower.includes('media')) return '‚öñÔ∏è';
    if (optionLower.includes('pesada')) return '‚öñÔ∏è';
    if (optionLower.includes('muy pesada')) return '‚öñÔ∏è';
    
    if (optionLower.includes('exw')) return 'üè≠';
    if (optionLower.includes('fca')) return 'üöö';
    if (optionLower.includes('fob')) return 'üö¢';
    if (optionLower.includes('cif')) return 'üíº';
    if (optionLower.includes('dap')) return 'üì¶';
    if (optionLower.includes('ddp')) return 'üè¢';
    
    if (optionLower.includes('contenedor')) return 'üì¶';
    if (optionLower.includes('lcl')) return 'üì¶';
    
    if (optionLower.includes('shanghai')) return 'üá®üá≥';
    if (optionLower.includes('shenzhen')) return 'üá®üá≥';
    if (optionLower.includes('hong kong')) return 'üá≠üá∞';
    if (optionLower.includes('busan')) return 'üá∞üá∑';
    if (optionLower.includes('rotterdam')) return 'üá≥üá±';
    if (optionLower.includes('hamburg')) return 'üá©üá™';
    if (optionLower.includes('new york')) return 'üá∫üá∏';
    if (optionLower.includes('miami')) return 'üá∫üá∏';
    if (optionLower.includes('medell√≠n')) return 'üá®üá¥';
    if (optionLower.includes('bogot√°')) return 'üá®üá¥';
    if (optionLower.includes('cartagena')) return 'üá®üá¥';
    if (optionLower.includes('m√©xico')) return 'üá≤üáΩ';
    if (optionLower.includes('buenos aires')) return 'üá¶üá∑';
    if (optionLower.includes('santiago')) return 'üá®üá±';
    if (optionLower.includes('lima')) return 'üáµüá™';
    if (optionLower.includes('s√£o paulo')) return 'üáßüá∑';
    
    if (optionLower.includes('s√≠') || optionLower.includes('si')) return '‚úÖ';
    if (optionLower.includes('no')) return '‚ùå';
    if (optionLower.includes('m√°s informaci√≥n')) return '‚ÑπÔ∏è';
    if (optionLower.includes('contactar')) return 'üë®‚Äçüíº';
    
    return '';
  };

  const handleSendMessage = async (content: string) => {
    if (!content.trim()) return;

    // Si estamos en modo formulario de cotizaci√≥n, manejarlo diferente
    if (quoteForm.active && quoteForm.step > 0 && quoteForm.step <= 10) {
      // Crear un nuevo mensaje del usuario
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el estado del chat con el mensaje del usuario
      setChatState((prev) => ({
        ...prev,
        messages: [...prev.messages, userMessage],
      }));

      // Procesar la respuesta del formulario
      handleQuoteFormProgress(content);
      return;
    }

    // Detectar comandos especiales
    if (content.toLowerCase() === 'quiero iniciar una cotizaci√≥n' || content.toLowerCase().includes('cotizar env√≠o')) {
      setQuoteForm({
        active: true,
        step: 1,
        history: []
      });
      
      // Crear un nuevo mensaje del usuario
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el estado del chat con el mensaje del usuario
      setChatState((prev) => ({
        ...prev,
        messages: [...prev.messages, userMessage],
      }));

      // Iniciar el flujo del formulario
      generateQuoteFormPrompt();
      return;
    }

    // Detectar consulta de env√≠o espec√≠fico
    const trackingRegex = /\b([A-Z]{3}\d{7})\b/;
    const trackingMatch = content.match(trackingRegex);
    
    // Detectar empresa espec√≠fica
    const companyRegex = /(Olivera S\.C)\b/i;
    const companyMatch = content.match(companyRegex);

    // Crear un nuevo mensaje del usuario
    const userMessage: ChatMessage = {
      id: uuidv4(),
      content,
      role: 'user',
      timestamp: Date.now().toString(),
    };

    // Limpiar opciones de respuesta r√°pida cuando el usuario env√≠a un mensaje
    setQuickReplyOptions([]);

    // Actualizar el estado del chat con el mensaje del usuario y mostrar carga
    setChatState((prev) => ({
      ...prev,
      messages: [...prev.messages, userMessage],
      isLoading: true,
      error: null,
    }));

    try {
      console.log('Sending message to API:', content);
      
      // Preparar el historial de mensajes recientes para enviar a la API
      const recentMessages = chatState.messages.slice(-10).map(msg => ({
        role: msg.role,
        content: msg.content
      }));

      // Enviar el mensaje y el historial a la API
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: content,
          sessionId: chatState.sessionId,
          history: recentMessages  // Enviar historial de conversaci√≥n
        }),
      });

      console.log('Response status:', response.status);

      if (!response.ok) {
        const errorData = await response.text();
        console.error('API error:', errorData);
        throw new Error(`API error: ${response.status} - ${errorData}`);
      }

      const data = await response.json();
      console.log('Received response:', data);

      // Procesar la respuesta para detectar patrones y activar componentes visuales
      let responseContent = data.response;
      let trackingVisualization = undefined;
      let customerAgentData = undefined;
      let attachments = undefined;

      // 1. Detectar c√≥digos de seguimiento en la respuesta o consulta
      const responseTrackingMatch = responseContent.match(/\b([A-Z]{3}\d{7})\b/);
      const trackingCode = (trackingMatch && trackingMatch[1]) || (responseTrackingMatch && responseTrackingMatch[1]);
      
      // Si hay un c√≥digo de seguimiento y la respuesta sugiere mostrar tracking
      if (trackingCode && (
          responseContent.toLowerCase().includes('visualizar el estado') ||
          responseContent.toLowerCase().includes('seguimiento de su env√≠o') ||
          responseContent.toLowerCase().includes('rastrear este env√≠o') ||
          content.toLowerCase().includes('tracking') ||
          content.toLowerCase().includes('seguimiento') ||
          content.toLowerCase().includes('rastrear')
      )) {
        console.log('Detected tracking visualization request for code:', trackingCode);
        
        // Generar datos de tracking basados en el c√≥digo
        const isExport = trackingCode.startsWith('ECR');
        trackingVisualization = {
          shipmentId: trackingCode,
          origin: { 
            name: isExport ? 'Manzanillo, M√©xico' : 'Shanghai, China',
            lat: isExport ? 19.0495 : 31.2304,
            lng: isExport ? -104.3140 : 121.4737
          },
          destination: { 
            name: isExport ? 'Long Beach, EE.UU.' : 'Manzanillo, M√©xico',
            lat: isExport ? 33.7701 : 19.0495,
            lng: isExport ? -118.1937 : -104.3140
          },
          currentLocation: { 
            name: isExport ? 'Oc√©ano Pac√≠fico' : 'Puerto de Shanghai',
            lat: isExport ? 24.5000 : 31.2304,
            lng: isExport ? -112.0000 : 121.4737
          },
          estimatedArrival: isExport ? '04/04/2025' : '15/05/2025',
          milestones: isExport ? [
            { name: 'Recogida', date: '15/11/2023', status: 'completed' as const },
            { name: 'Llegada a puerto de origen', date: '18/11/2023', status: 'completed' as const },
            { name: 'Carga en buque', date: '20/11/2023', status: 'completed' as const },
            { name: 'En tr√°nsito mar√≠timo', date: 'Actual', status: 'inProgress' as const },
            { name: 'Llegada a puerto destino', date: '04/04/2025', status: 'upcoming' as const },
            { name: 'Despacho aduanal', date: 'Pendiente', status: 'upcoming' as const },
            { name: 'Entrega final', date: 'Pendiente', status: 'upcoming' as const }
          ] : [
            { name: 'Booking confirmado', date: '10/02/2024', status: 'completed' as const },
            { name: 'Carga lista en almac√©n', date: '15/02/2024', status: 'completed' as const },
            { name: 'Documentaci√≥n en proceso', date: 'Actual', status: 'inProgress' as const },
            { name: 'Embarque programado', date: '01/03/2024', status: 'upcoming' as const },
            { name: 'En tr√°nsito mar√≠timo', date: 'Pendiente', status: 'upcoming' as const },
            { name: 'Llegada a puerto destino', date: '15/05/2025', status: 'upcoming' as const },
            { name: 'Entrega final', date: 'Pendiente', status: 'upcoming' as const }
          ],
          carrier: isExport ? 'Maersk Line' : 'COSCO Shipping',
          vesselName: isExport ? 'Maersk Semarang' : 'COSCO Harmony',
          containerNumbers: isExport ? ['MSKU7627321'] : ['CSLU9876543']
        };
      }

      // 2. Detectar solicitud de contacto con ejecutivo
      if (
        responseContent.toLowerCase().includes('contactar a su ejecutivo') ||
        responseContent.toLowerCase().includes('comunicarse con su agente') ||
        responseContent.toLowerCase().includes('opciones para contactar') ||
        content.toLowerCase().includes('contactar ejecutivo') ||
        content.toLowerCase().includes('hablar con agente') ||
        content.toLowerCase().includes('contactar agente')
      ) {
        console.log('Detected customer agent contact request');
        
        // Determinar el agente basado en el c√≥digo de tracking si existe
        const agentName = trackingCode && trackingCode.startsWith('ECR') ? 'Mar√≠a Gonz√°lez' : 'Carlos Rodr√≠guez';
        
        customerAgentData = {
          name: agentName,
          position: 'Ejecutivo de Cuenta',
          email: agentName.toLowerCase().replace(' ', '.') + '@nowports.com',
          phone: '+52 1 33 ' + (Math.floor(Math.random() * 9000000) + 1000000)
        };
      }

      // 3. Detectar solicitud de documentos
      if (
        responseContent.toLowerCase().includes('documentos del env√≠o') ||
        responseContent.toLowerCase().includes('ver los documentos') ||
        responseContent.toLowerCase().includes('documentaci√≥n disponible') ||
        content.toLowerCase().includes('ver documentos') ||
        content.toLowerCase().includes('mostrar documentos') ||
        (trackingCode && content.toLowerCase().includes('documentos'))
      ) {
        console.log('Detected documents request');
        
        // Generar documentos de ejemplo
        attachments = [
          {
            id: uuidv4(),
            name: `BL-${trackingCode || 'SAMPLE'}.pdf`,
            type: 'application/pdf',
            size: 1024 * 1024 * 2.3, // 2.3 MB
          },
          {
            id: uuidv4(),
            name: `Commercial-Invoice-${trackingCode || 'SAMPLE'}.pdf`,
            type: 'application/pdf',
            size: 1024 * 512, // 512 KB
          },
          {
            id: uuidv4(),
            name: `Packing-List-${trackingCode || 'SAMPLE'}.pdf`,
            type: 'application/pdf',
            size: 1024 * 256, // 256 KB
          }
        ];
      }

      // Crear mensaje del asistente desde la respuesta con los componentes detectados
      const assistantMessage: ChatMessage = {
        id: uuidv4(),
        content: responseContent,
        role: 'assistant',
        timestamp: Date.now().toString(),
        trackingVisualization: trackingVisualization,
        customerAgentData: customerAgentData,
        attachments: attachments
      };

      // Actualizar el estado del chat con la respuesta del asistente
      setChatState((prev) => ({
        ...prev,
        messages: [...prev.messages, assistantMessage],
        isLoading: false,
        sessionId: data.sessionId,
      }));

      // Extraer y configurar opciones de respuesta r√°pida
      const options = extractQuickReplyOptions(responseContent);
      setQuickReplyOptions(options);
      
      // Si se detectaron opciones en el formato [quickReplies: ...], actualizar el mensaje
      if (options.length > 0) {
        setChatState((prev) => {
          const updatedMessages = [...prev.messages];
          // Obtener el √∫ltimo mensaje (que es el que acabamos de a√±adir)
          const lastMessage = updatedMessages[updatedMessages.length - 1];
          
          // Actualizar el mensaje con las opciones detectadas
          updatedMessages[updatedMessages.length - 1] = {
            ...lastMessage,
            quickReplies: options
          };
          
          return {
            ...prev,
            messages: updatedMessages
          };
        });
      }
    } catch (error) {
      console.error('Error sending message:', error);
      setChatState((prev) => ({
        ...prev,
        isLoading: false,
        error: 'Failed to get response. Please try again. Error: ' + (error instanceof Error ? error.message : String(error)),
      }));
    }
  };

  // Funci√≥n para manejar el env√≠o de documentos
  const handleSendDocument = (file: File) => {
    // Crear un documento adjunto para el mensaje
    const documentAttachment: DocumentAttachment = {
      id: uuidv4(),
      name: file.name,
      type: file.type || 'application/octet-stream',
      size: file.size,
    };

    // Crear un mensaje del usuario con el documento adjunto
    const userMessage: ChatMessage = {
      id: uuidv4(),
      content: `He enviado un documento: ${file.name}`,
      role: 'user',
      timestamp: Date.now().toString(),
      attachments: [documentAttachment]
    };

    // Limpiar opciones de respuesta r√°pida
    setQuickReplyOptions([]);

    // Actualizar el estado del chat con el mensaje del usuario y mostrar carga
    setChatState((prev) => ({
      ...prev,
      messages: [...prev.messages, userMessage],
      isLoading: true,
      error: null,
    }));

    // Simular la respuesta despu√©s de un breve retraso
    setTimeout(() => {
      let responseContent = '';
      let attachments: DocumentAttachment[] = [];

      // Determinar el tipo de respuesta basada en el tipo de archivo
      if (file.name.toLowerCase().includes('bl') || file.name.toLowerCase().includes('bill')) {
        responseContent = `He recibido tu Bill of Lading. Este documento est√° correctamente formateado. 

Como agente, puedo ayudarte con los siguientes pasos:
1. Verificar la informaci√≥n del transportista
2. Coordinar la liberaci√≥n de la carga
3. Programar la entrega final

¬øTe gustar√≠a que te env√≠e un modelo actualizado de Bill of Lading para tus pr√≥ximos env√≠os?`;
        attachments = [SAMPLE_DOCUMENTS.bl];
      } else if (file.name.toLowerCase().includes('invoice') || file.name.toLowerCase().includes('factura')) {
        responseContent = `Gracias por enviar la factura comercial. Hemos registrado los siguientes detalles:

- Monto total: $4,567.00 USD
- T√©rminos de pago: 30 d√≠as
- Incoterm: CIF

Para completar el proceso de importaci√≥n, necesitaremos tambi√©n el Packing List y el Certificado de Origen. ¬øLos tienes disponibles?`;
        attachments = [SAMPLE_DOCUMENTS.invoice];
      } else if (file.name.toLowerCase().includes('pack') || file.name.toLowerCase().includes('lista')) {
        responseContent = `He recibido el Packing List que enviaste. Este documento contiene la siguiente informaci√≥n:

- 12 pallets
- 240 cajas en total
- Peso bruto: 1,450 kg
- Dimensiones totales: 120 x 100 x 160 cm

¬øNecesitas que coordine alg√∫n servicio especial para el manejo de esta carga?`;
        attachments = [SAMPLE_DOCUMENTS.packing];
      } else {
        responseContent = `He recibido tu documento "${file.name}". Lo he revisado y parece estar en orden.

Si necesitas alguna aclaraci√≥n o tienes preguntas sobre este documento, por favor h√°zmelo saber. ¬øHay algo m√°s en lo que pueda ayudarte respecto a este documento?`;
      }

      // Crear mensaje del asistente
      const assistantMessage: ChatMessage = {
        id: uuidv4(),
        content: responseContent,
        role: 'assistant',
        timestamp: Date.now().toString(),
        attachments: attachments.length > 0 ? attachments : undefined
      };

      // Actualizar el estado del chat con la respuesta
      setChatState((prev) => ({
        ...prev,
        messages: [...prev.messages, assistantMessage],
        isLoading: false,
      }));

      // Generar opciones de respuesta r√°pida
      const options = extractQuickReplyOptions(responseContent);
      if (file.name.toLowerCase().includes('bl') || file.name.toLowerCase().includes('bill')) {
        options.push({ label: 'Ver modelo actualizado', value: 'Me gustar√≠a ver el modelo actualizado de Bill of Lading', icon: 'üìÑ' });
      } else if (file.name.toLowerCase().includes('invoice') || file.name.toLowerCase().includes('factura')) {
        options.push({ label: 'Enviar Packing List', value: 'Enviar√© el Packing List pronto', icon: 'üì¶' });
        options.push({ label: 'Solicitar ayuda', value: 'Necesito ayuda para conseguir el Certificado de Origen', icon: 'üÜò' });
      }
      setQuickReplyOptions(options);
    }, 1500);
  };

  // Manejar la selecci√≥n de una respuesta r√°pida
  const handleQuickReplySelect = (value: string) => {
    // Verificar si se trata de hacer seguimiento a un embarque
    if (value.toLowerCase().includes('hacer seguimiento') || value.toLowerCase().includes('seguimiento a mi embarque')) {
      // Crear un mensaje del usuario
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content: value,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el chat con el mensaje del usuario
      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, userMessage],
        isLoading: true
      }));

      // Simular respuesta del asistente pidiendo el c√≥digo de seguimiento
      setTimeout(() => {
        const assistantMessage: ChatMessage = {
          id: uuidv4(),
          content: "Para poder mostrarte el estado de tu embarque, necesito que me proporciones el c√≥digo de seguimiento. Los c√≥digos suelen tener el formato ECRxxxxxxx para exportaciones o ICRxxxxxxx para importaciones.",
          role: 'assistant',
          timestamp: Date.now().toString(),
          quickReplies: [
            { label: 'ECR2503586', value: 'Mi c√≥digo de seguimiento es ECR2503586', icon: 'üì¶' },
            { label: 'ICR1982375', value: 'Mi c√≥digo de seguimiento es ICR1982375', icon: 'üì¶' },
            { label: 'No conozco mi c√≥digo', value: 'No tengo mi c√≥digo de seguimiento', icon: '‚ùì' }
          ]
        };

        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, assistantMessage],
          isLoading: false
        }));
      }, 1000);
      
      return;
    }
    
    // Verificar si es una solicitud con c√≥digo de seguimiento
    const trackingCodeRegex = /(?:c√≥digo de seguimiento|c√≥digo|tracking|seguimiento) (?:es )?(ECR\d{7}|ICR\d{7})/i;
    const trackingMatch = value.match(trackingCodeRegex);
    
    if (trackingMatch && trackingMatch[1]) {
      const trackingCode = trackingMatch[1].toUpperCase();
      
      // Crear un mensaje del usuario
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content: value,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el chat con el mensaje del usuario
      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, userMessage],
        isLoading: true
      }));

      // Simular respuesta del asistente con la visualizaci√≥n del tracking
      setTimeout(() => {
        const trackingData: TrackingVisualization = {
          shipmentId: trackingCode,
          origin: { 
            name: trackingCode.startsWith('ECR') ? 'Manzanillo, M√©xico' : 'Shanghai, China',
            lat: trackingCode.startsWith('ECR') ? 19.0495 : 31.2304,
            lng: trackingCode.startsWith('ECR') ? -104.3140 : 121.4737
          },
          destination: { 
            name: trackingCode.startsWith('ECR') ? 'Long Beach, EE.UU.' : 'Manzanillo, M√©xico',
            lat: trackingCode.startsWith('ECR') ? 33.7701 : 19.0495,
            lng: trackingCode.startsWith('ECR') ? -118.1937 : -104.3140
          },
          currentLocation: { 
            name: trackingCode.startsWith('ECR') ? 'Oc√©ano Pac√≠fico' : 'Puerto de Shanghai',
            lat: trackingCode.startsWith('ECR') ? 24.5000 : 31.2304,
            lng: trackingCode.startsWith('ECR') ? -112.0000 : 121.4737
          },
          estimatedArrival: trackingCode.startsWith('ECR') ? '04/04/2025' : '15/05/2025',
          milestones: trackingCode.startsWith('ECR') ? [
            { name: 'Recogida', date: '15/11/2023', status: 'completed' as const },
            { name: 'Llegada a puerto de origen', date: '18/11/2023', status: 'completed' as const },
            { name: 'Carga en buque', date: '20/11/2023', status: 'completed' as const },
            { name: 'En tr√°nsito mar√≠timo', date: 'Actual', status: 'inProgress' as const },
            { name: 'Llegada a puerto destino', date: '04/04/2025', status: 'upcoming' as const },
            { name: 'Despacho aduanal', date: 'Pendiente', status: 'upcoming' as const },
            { name: 'Entrega final', date: 'Pendiente', status: 'upcoming' as const }
          ] : [
            { name: 'Booking confirmado', date: '10/02/2024', status: 'completed' as const },
            { name: 'Carga lista en almac√©n', date: '15/02/2024', status: 'completed' as const },
            { name: 'Documentaci√≥n en proceso', date: 'Actual', status: 'inProgress' as const },
            { name: 'Embarque programado', date: '01/03/2024', status: 'upcoming' as const },
            { name: 'En tr√°nsito mar√≠timo', date: 'Pendiente', status: 'upcoming' as const },
            { name: 'Llegada a puerto destino', date: '15/05/2025', status: 'upcoming' as const },
            { name: 'Entrega final', date: 'Pendiente', status: 'upcoming' as const }
          ],
          carrier: trackingCode.startsWith('ECR') ? 'Maersk Line' : 'COSCO Shipping',
          vesselName: trackingCode.startsWith('ECR') ? 'Maersk Semarang' : 'COSCO Harmony',
          containerNumbers: trackingCode.startsWith('ECR') ? ['MSKU7627321'] : ['CSLU9876543']
        };

        const assistantMessage: ChatMessage = {
          id: uuidv4(),
          content: `He encontrado la informaci√≥n de tu embarque con c√≥digo ${trackingCode}:`,
          role: 'assistant',
          timestamp: Date.now().toString(),
          trackingVisualization: trackingData,
          quickReplies: [
            { label: 'Actualizar ubicaci√≥n', value: `Actualizar ubicaci√≥n de mi embarque ${trackingCode}`, icon: 'üîÑ' },
            { label: 'Ver documentos', value: `Ver documentos del env√≠o ${trackingCode}`, icon: 'üìÑ' },
            { label: 'Contactar ejecutivo', value: 'Contactar con mi agente asignado', icon: 'üë®‚Äçüíº' }
          ]
        };

        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, assistantMessage],
          isLoading: false
        }));
      }, 1000);
      
      return;
    }
    
    // Verificar si el usuario no tiene su c√≥digo de seguimiento
    if (value.toLowerCase().includes('no tengo mi c√≥digo') || value.toLowerCase().includes('no conozco mi c√≥digo')) {
      // Crear un mensaje del usuario
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content: value,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el chat con el mensaje del usuario
      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, userMessage],
        isLoading: true
      }));

      // Simular respuesta del asistente
      setTimeout(() => {
        const assistantMessage: ChatMessage = {
          id: uuidv4(),
          content: "No hay problema. Tambi√©n puedes consultar tus embarques de otras formas:\n\n1. Por nombre de tu empresa\n2. Por n√∫mero de contenedor\n3. Por n√∫mero de reserva\n\n¬øCu√°l de estas opciones prefieres utilizar?",
          role: 'assistant',
          timestamp: Date.now().toString(),
          quickReplies: [
            { label: 'Por empresa', value: 'Buscar por nombre de empresa', icon: 'üè¢' },
            { label: 'Por contenedor', value: 'Buscar por n√∫mero de contenedor', icon: 'üì¶' },
            { label: 'Por reserva', value: 'Buscar por n√∫mero de reserva', icon: 'üîñ' },
            { label: 'Contactar ejecutivo', value: 'Necesito hablar con mi ejecutivo', icon: 'üë®‚Äçüíº' }
          ]
        };

        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, assistantMessage],
          isLoading: false
        }));
      }, 1000);
      
      return;
    }
    
    // Verificar si es una solicitud para contactar con el agente asignado
    if (value.toLowerCase().includes('contactar con mi agente') || value.toLowerCase().includes('contactar agente') || value.toLowerCase().includes('contactar ejecutivo')) {
      // Verificar si tenemos un mensaje previo con informaci√≥n de seguimiento
      const previousMessages = chatState.messages;
      const hasPreviousTrackingInfo = previousMessages.some(msg => 
        msg.trackingVisualization || 
        (msg.content && msg.content.includes('Informaci√≥n del env√≠o'))
      );

      // Crear un mensaje del usuario
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content: value,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el chat con el mensaje del usuario
      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, userMessage],
        isLoading: true
      }));

      // Si hay informaci√≥n de seguimiento previa, mostrar opciones de contacto directamente
      if (hasPreviousTrackingInfo) {
        // Buscar el c√≥digo de seguimiento en los mensajes anteriores si est√° disponible
        let shipmentId = '';
        let shipmentMsg = previousMessages.find(msg => msg.trackingVisualization);
        if (shipmentMsg && shipmentMsg.trackingVisualization) {
          shipmentId = shipmentMsg.trackingVisualization.shipmentId;
        } else {
          // Intentar extraer el c√≥digo de env√≠o del contenido del mensaje
          const trackingCodeRegex = /\b([A-Z]{3}\d{7})\b/;
          for (let i = previousMessages.length - 1; i >= 0; i--) {
            const match = previousMessages[i].content.match(trackingCodeRegex);
            if (match && match[1]) {
              shipmentId = match[1];
              break;
            }
          }
        }

        // Determinar el nombre del agente basado en el c√≥digo de env√≠o
        const agentName = shipmentId.startsWith('ECR') ? 'Mar√≠a Gonz√°lez' : 'Carlos Rodr√≠guez';
        
        setTimeout(() => {
          const assistantMessage: ChatMessage = {
            id: uuidv4(),
            content: `Para el env√≠o ${shipmentId || 'actual'}, tu agente asignado es **${agentName}**. Puedes contactar a tu ejecutivo directamente desde la tarjeta de contacto que aparece arriba.`,
            role: 'assistant',
            timestamp: Date.now().toString(),
            customerAgentData: {
              name: agentName,
              position: 'Ejecutivo de Cuenta',
              email: agentName.toLowerCase().replace(' ', '.') + '@nowports.com',
              phone: '+52 1 33 ' + (Math.floor(Math.random() * 9000000) + 1000000)
            }
          };

          setChatState(prev => ({
            ...prev,
            messages: [...prev.messages, assistantMessage],
            isLoading: false
          }));
        }, 800);
      } else {
        // Si no hay informaci√≥n de seguimiento previa, solicitar informaci√≥n
        setTimeout(() => {
          const assistantMessage: ChatMessage = {
            id: uuidv4(),
            content: "Entendido. Para contactar a tu agente asignado, por favor proporciona tu n√∫mero de cuenta Nowports o el nombre de tu empresa. Con esta informaci√≥n, podr√© localizar a tu agente y facilitar la comunicaci√≥n de inmediato.",
            role: 'assistant',
            timestamp: Date.now().toString(),
          };

          setChatState(prev => ({
            ...prev,
            messages: [...prev.messages, assistantMessage],
            isLoading: false
          }));
        }, 800);
      }
      
      return;
    }
    
    // Verificar si quiere llamar, enviar WhatsApp o correo al agente
    const contactMethodRegex = /(?:Llamar|Enviar WhatsApp|Enviar correo) a (.+?)(?:\sal\s|\sa\s)?(.+)?/i;
    const contactMatch = value.match(contactMethodRegex);
    
    if (contactMatch) {
      const contactMethod = value.toLowerCase().includes("llamar") ? "llamada telef√≥nica" : 
                           value.toLowerCase().includes("whatsapp") ? "WhatsApp" : "correo electr√≥nico";
      const ejecutivo = contactMatch[1];
      
      // Crear un mensaje del usuario
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content: value,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el chat con el mensaje del usuario
      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, userMessage],
        isLoading: true
      }));

      // Simular respuesta del asistente despu√©s de un breve retraso
      setTimeout(() => {
        const assistantMessage: ChatMessage = {
          id: uuidv4(),
          content: `‚úÖ **Contacto iniciado**\n\n` +
                   `Te he conectado con ${ejecutivo} v√≠a ${contactMethod}.\n\n` +
                   (contactMethod === "llamada telef√≥nica" ? 
                     `La llamada se iniciar√° en breve. Por favor, ten en cuenta que en un entorno real, esto abrir√≠a tu aplicaci√≥n de tel√©fono con el n√∫mero marcado.` : 
                    contactMethod === "WhatsApp" ? 
                     `He preparado un mensaje en WhatsApp. En un entorno real, esto abrir√≠a la aplicaci√≥n de WhatsApp con un mensaje predefinido para tu ejecutivo.` :
                     `He preparado un correo electr√≥nico. En un entorno real, esto abrir√≠a tu cliente de correo con un mensaje predefinido para tu ejecutivo.`),
          role: 'assistant',
          timestamp: Date.now().toString(),
          quickReplies: [
            { label: 'Ver estado de env√≠os', value: 'Ver estado de mis env√≠os activos', icon: 'üì¶' },
            { label: 'Nueva cotizaci√≥n', value: 'Quiero iniciar una cotizaci√≥n', icon: 'üí∞' },
            { label: 'Regresar al men√∫', value: 'Mostrar men√∫ principal', icon: 'üè†' }
          ]
        };

        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, assistantMessage],
          isLoading: false
        }));
      }, 800);
      
      return;
    }
    
    // Verificar si es una solicitud para actualizar el estado de un env√≠o
    const updateTrackingRegex = /actualizar estado del env(√≠|i)o ([A-Z]{3}\d{7})/i;
    const updateMatch = value.toLowerCase().match(updateTrackingRegex);
    
    if (updateMatch && updateMatch[2]) {
      const trackingCode = updateMatch[2].toUpperCase();
      
      // Crear un mensaje del usuario
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content: value,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el chat con el mensaje del usuario
      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, userMessage],
        isLoading: true
      }));

      // Simular respuesta del asistente despu√©s de un breve retraso
      setTimeout(() => {
        const assistantMessage: ChatMessage = {
          id: uuidv4(),
          content: `‚úÖ **Estado actualizado para env√≠o ${trackingCode}**\n\n` +
                  `He verificado los √∫ltimos datos de tu env√≠o:\n\n` +
                  `**Actualizaci√≥n:** El env√≠o ha pasado de "En tr√°nsito internacional" a "En tr√°mite aduanal"\n` +
                  `**Ubicaci√≥n actual:** Terminal de Aduanas, Long Beach\n` +
                  `**√öltimo evento:** Arribo a puerto de destino (${new Date().toLocaleDateString()})\n` +
                  `**Pr√≥ximo paso:** Liberaci√≥n aduanal\n` +
                  `**Tiempo estimado:** 2-3 d√≠as h√°biles\n\n` +
                  `¬øDeseas recibir notificaciones autom√°ticas cuando haya cambios en el estado de este env√≠o?`,
          role: 'assistant',
          timestamp: Date.now().toString(),
          quickReplies: [
            { label: 'Activar notificaciones', value: `Activar notificaciones para ${trackingCode}`, icon: 'üîî' },
            { label: 'Ver documentos', value: `Ver documentos del env√≠o ${trackingCode}`, icon: 'üìÑ' },
            { label: 'Contactar agente', value: 'Contactar con mi agente asignado', icon: 'üë®‚Äçüíº' }
          ]
        };

        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, assistantMessage],
          isLoading: false
        }));
      }, 800);
      
      return;
    }
    
    // Verificar si es una solicitud para ver documentos de un env√≠o
    const viewDocumentsRegex = /ver documentos del env(√≠|i)o ([A-Z]{3}\d{7})/i;
    const viewDocMatch = value.toLowerCase().match(viewDocumentsRegex);
    
    if (viewDocMatch && viewDocMatch[2]) {
      const trackingCode = viewDocMatch[2].toUpperCase();
      
      // Crear un mensaje del usuario
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content: value,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el chat con el mensaje del usuario
      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, userMessage],
        isLoading: true
      }));

      // Simular respuesta del asistente despu√©s de un breve retraso
      setTimeout(() => {
        const assistantMessage: ChatMessage = {
          id: uuidv4(),
          content: `üìã **Documentos disponibles para el env√≠o ${trackingCode}**\n\n` +
                  `Aqu√≠ tienes los documentos asociados a este embarque:`,
          role: 'assistant',
          timestamp: Date.now().toString(),
          attachments: [
            SAMPLE_DOCUMENTS.bl,
            SAMPLE_DOCUMENTS.invoice,
            SAMPLE_DOCUMENTS.packing
          ],
          quickReplies: [
            { label: 'Actualizar estado', value: `Actualizar estado del env√≠o ${trackingCode}`, icon: 'üîÑ' },
            { label: 'Descargar todos', value: 'Descargar todos los documentos', icon: 'üì•' },
            { label: 'Solicitar adicionales', value: 'Necesito documentos adicionales', icon: 'üìã' }
          ]
        };

        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, assistantMessage],
          isLoading: false
        }));
      }, 800);
      
      return;
    }
    
    // Verificar si la respuesta r√°pida es para consultar un env√≠o
    if (value.toLowerCase().includes('consultar un env√≠o') || value.toLowerCase().includes('consultar env√≠o')) {
      // Crear un mensaje del usuario 
      const userMessage: ChatMessage = {
        id: uuidv4(),
        content: value,
        role: 'user',
        timestamp: Date.now().toString(),
      };

      // Actualizar el chat con el mensaje del usuario
      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, userMessage],
        isLoading: true
      }));

      // Simular respuesta del asistente despu√©s de un breve retraso
      setTimeout(() => {
        const assistantMessage: ChatMessage = {
          id: uuidv4(),
          content: "Por favor ingresa el c√≥digo de seguimiento de tu env√≠o. Los c√≥digos tienen el formato ECRxxxxxxx para exportaciones o ICRxxxxxxx para importaciones.",
          role: 'assistant',
          timestamp: Date.now().toString(),
          quickReplies: [
            { label: 'ECR2503586', value: 'Quiero consultar el env√≠o ECR2503586', icon: 'üì¶' },
            { label: 'ICR1982375', value: 'Quiero consultar el env√≠o ICR1982375', icon: 'üì¶' },
            { label: 'Cancelar', value: 'Cancelar consulta', icon: '‚ùå' }
          ]
        };

        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, assistantMessage],
          isLoading: false
        }));
      }, 800);
      
      return;
    }
    
    // Verificar si la respuesta r√°pida es para solicitar un documento
    if (value.toLowerCase().includes('modelo actualizado') || 
        value.toLowerCase().includes('documentos') || 
        value.toLowerCase().includes('certificado') ||
        value.toLowerCase().includes('declaraci√≥n')) {
      
      let documentToSend: DocumentAttachment | null = null;
      
      if (value.toLowerCase().includes('bill of lading') || value.toLowerCase().includes('bl')) {
        documentToSend = SAMPLE_DOCUMENTS.bl;
      } else if (value.toLowerCase().includes('factura') || value.toLowerCase().includes('invoice')) {
        documentToSend = SAMPLE_DOCUMENTS.invoice;
      } else if (value.toLowerCase().includes('pack') || value.toLowerCase().includes('packing')) {
        documentToSend = SAMPLE_DOCUMENTS.packing;
      } else if (value.toLowerCase().includes('aduana') || value.toLowerCase().includes('customs')) {
        documentToSend = SAMPLE_DOCUMENTS.custom;
      } else if (value.toLowerCase().includes('certificado') || value.toLowerCase().includes('certificate')) {
        documentToSend = SAMPLE_DOCUMENTS.certificate;
      }
      
      if (documentToSend) {
        // Enviar el mensaje primero
        handleSendMessage(value);
        
        // Luego, despu√©s de un breve retraso, enviar la respuesta con el documento
        setTimeout(() => {
          const assistantMessage: ChatMessage = {
            id: uuidv4(),
            content: `Aqu√≠ tienes el documento solicitado. Por favor rev√≠salo y av√≠same si necesitas alguna aclaraci√≥n.`,
            role: 'assistant',
            timestamp: Date.now().toString(),
            attachments: [documentToSend!]
          };
          
          setChatState((prev) => ({
            ...prev,
            messages: [...prev.messages, assistantMessage],
          }));
        }, 1500);
        
        return;
      }
    }
    
    // Para el resto de casos, comportamiento normal
    handleSendMessage(value);
  };

  return (
    <div className="flex flex-col h-full">
      <div className={`${theme === 'dark' ? 'bg-gradient-to-r from-blue-800 to-blue-900' : 'bg-gradient-to-r from-blue-500 to-blue-600'} p-4 rounded-t-lg shadow flex items-center justify-center`}>
        <div className="animate-pulse flex space-x-2">
          <div className={`h-2 w-2 rounded-full ${theme === 'dark' ? 'bg-blue-200' : 'bg-white'}`}></div>
          <div className={`h-2 w-2 rounded-full ${theme === 'dark' ? 'bg-blue-200' : 'bg-white'}`}></div>
          <div className={`h-2 w-2 rounded-full ${theme === 'dark' ? 'bg-blue-200' : 'bg-white'}`}></div>
        </div>
      </div>
      
      <div className={`flex-1 p-4 overflow-y-auto ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'} transition-all duration-300`} ref={chatContainerRef}>
        {chatState.messages.map((message, index) => (
          <div key={message.id} className="transition-all duration-500 animate-fadeIn" style={{ animationDelay: `${index * 0.1}s` }}>
            <ChatBubble 
              message={message} 
              theme={theme}
              onQuickReplySelect={handleQuickReplySelect}
            />
          </div>
        ))}

        {chatState.isLoading && (
          <div className={`flex items-center justify-center my-4 ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
            <div className="dot-typing"></div>
          </div>
        )}

        {chatState.error && (
          <div className={`text-red-500 text-sm my-2 p-2 ${theme === 'dark' ? 'bg-red-900/30' : 'bg-red-50'} rounded animate-shake`}>
            {chatState.error}
          </div>
        )}

        {/* Quick Reply options */}
        {quickReplyOptions.length > 0 && !chatState.isLoading && (
          <div className="mt-4 animate-slideUp">
            <p className={`text-sm mb-2 ${theme === 'dark' ? 'text-gray-300' : 'text-gray-600'}`}>Opciones r√°pidas:</p>
            <QuickReplies options={quickReplyOptions} onSelect={handleQuickReplySelect} theme={theme} />
          </div>
        )}
      </div>
      
      <div className={`p-4 ${theme === 'dark' ? 'border-t border-gray-700 bg-gray-800' : 'border-t bg-gray-50'} transition-all duration-300 rounded-b-lg`}>
        <ChatInput 
          onSendMessage={handleSendMessage} 
          onSendDocument={handleSendDocument}
          disabled={chatState.isLoading} 
          theme={theme}
        />
      </div>

      <style jsx global>{`
        /* Animaci√≥n de puntos para indicar carga */
        .dot-typing {
          position: relative;
          width: 6px;
          height: 6px;
          border-radius: 5px;
          background-color: ${theme === 'dark' ? '#9ca3af' : '#6b7280'};
          color: ${theme === 'dark' ? '#9ca3af' : '#6b7280'};
          animation: dotTyping 1.5s infinite linear;
        }
        
        .dot-typing::before,
        .dot-typing::after {
          content: '';
          position: absolute;
          top: 0;
          width: 6px;
          height: 6px;
          border-radius: 5px;
          background-color: ${theme === 'dark' ? '#9ca3af' : '#6b7280'};
          color: ${theme === 'dark' ? '#9ca3af' : '#6b7280'};
          animation: dotTyping 1.5s infinite linear;
        }
        
        .dot-typing::before {
          left: -12px;
          animation-delay: 0s;
        }
        
        .dot-typing::after {
          left: 12px;
          animation-delay: 0.75s;
        }
        
        @keyframes dotTyping {
          0% {
            transform: scale(1);
            opacity: 0.7;
          }
          25% {
            transform: scale(1.5);
            opacity: 1;
          }
          50% {
            transform: scale(1);
            opacity: 0.7;
          }
          100% {
            transform: scale(1);
            opacity: 0.7;
          }
        }
        
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideUp {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
          20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.5s ease-out forwards;
        }
        
        .animate-slideUp {
          animation: slideUp 0.4s ease-out forwards;
        }
        
        .animate-shake {
          animation: shake 0.5s ease-in-out;
        }
      `}</style>
    </div>
  );
};

export default ChatContainer; 